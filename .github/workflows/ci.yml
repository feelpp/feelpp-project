name: CI

on:
  push:
    branches:
      - '**'
    tags:
      - 'v*'

jobs:

  build_wheel:
    runs-on: self-${{ matrix.os }}
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, ubuntu-24.04]
    name: Build wheel package
    if: "!contains(github.event.head_commit.message, 'skip wheel')"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          lfs: true
          submodules: recursive
          clean: true

      - uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Install uv
        uses: astral-sh/setup-uv@v5

      - name: Install Python/Node Env
        run: |
          uv venv --system-site-packages
          source .venv/bin/activate
          uv pip install -r pyproject.toml --extra dev --extra test
          npm install --verbose
          npx downdoc README.adoc

      - name: Build wheel
        run: |
          source .venv/bin/activate
          pipx run build
          uv pip install dist/*.whl

      - name: Python Tests
        run: |
          source .venv/bin/activate

        env:
          PYTHONPATH: ${{ github.workspace }}
          GIRDER_API_KEY: ${{ secrets.GIRDER }}

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: artifacts-wheel-${{ matrix.os }}
          path: dist/*.whl

  build_docs:
    needs: build_wheel
    runs-on: self-${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-22.04, ubuntu-24.04]
    name: Build & Deploy docs
    if: "!contains(github.event.head_commit.message, 'skip docs')"
    steps:
      - uses: actions/checkout@v4
        with:
          lfs: true
          submodules: recursive
          clean: true

      - name: Install credentials
        run: echo "https://$GITHUB_OAUTH:@github.com" > $HOME/.git-credentials
        env:
          GITHUB_OAUTH: ${{ secrets.CR_PAT_WORKFLOW }}

      - name: Download Wheels
        uses: actions/download-artifact@v4
        with:
          name: artifacts-wheel-${{ matrix.os }}
          path: dist/

      - uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Install uv
        uses: astral-sh/setup-uv@v5

      - name: Install Python deps
        run: |
          uv venv --system-site-packages
          source .venv/bin/activate
          uv pip install dist/*.whl

      - name: Build Antora site
        run: |
          source .venv/bin/activate
          npm install --verbose
          npm run antora || true
          npm run antora
        env:
          GIRDER_API_KEY: ${{ secrets.GIRDER }}

      - name: Deploy to GitHub Pages
        if: github.ref == 'refs/heads/master' && matrix.os == 'ubuntu-22.04'
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: gh-pages
          folder: public

  build_code:
    needs: build_wheel
    runs-on: self-${{ matrix.os }}
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, ubuntu-24.04]
    name: Build & Test C++ (deb)
    if: "!contains(github.event.head_commit.message, 'skip build')"
    steps:
      - uses: actions/checkout@v4
        with:
          lfs: true
          submodules: recursive
          clean: true

      - name: Download Wheels
        uses: actions/download-artifact@v4
        with:
          name: artifacts-wheel-${{ matrix.os }}
          path: dist/

      - uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Install uv
        uses: astral-sh/setup-uv@v5

      - name: Install Python & Node Env
        run: |
          uv venv --system-site-packages
          source .venv/bin/activate
          uv pip install -r pyproject.toml --extra test
          uv pip install dist/*.whl
          npm install --verbose
          npx downdoc README.adoc

      - name: Build C++ code
        run: |
          source .venv/bin/activate
          cmake --preset default
          cmake --build --preset default

      - name: Run CTest
        if: "!contains(github.event.head_commit.message, 'skip tests')"
        run: |
          source .venv/bin/activate
          ctest --preset default
        env:
          OMPI_ALLOW_RUN_AS_ROOT: 1
          OMPI_ALLOW_RUN_AS_ROOT_CONFIRM: 1
          GIRDER_API_KEY: ${{ secrets.GIRDER }}

      - name: Package .deb
        run: |
          cmake --build --preset default --target package

      - name: Upload Debian artifacts
        uses: actions/upload-artifact@v4
        with:
          name: artifacts-deb-${{ matrix.os }}
          path: build/default/assets/feelpp-project-*

  docker:
    needs: build_code
    runs-on: ubuntu-22.04
    if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/v') || contains(github.event.head_commit.message, '[build container]')
    env:
      CODENAME: jammy
    name: Build & Push Docker
    steps:
      - uses: actions/checkout@v4
        with:
          lfs: true
          submodules: recursive

      - name: Download Debian artifacts
        uses: actions/download-artifact@v4
        with:
          name: artifacts-deb-ubuntu-22.04
          path: artifacts/

      - name: Copy LICENSE
        run: cp LICENSE artifacts/

      - id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/feelpp/feelpp-project
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
          labels: |
            org.opencontainers.image.source="https://github.com/feelpp/feelpp-project"
            org.opencontainers.image.licenses="BSD-3-Clause"
            org.opencontainers.image.title="feelpp-project"
            org.opencontainers.image.description="Finite-element template project based on Feel++."

      - name: Extract tag
        id: tag_extractor
        run: |
          TAG=$(echo "${{ steps.meta.outputs.tags }}" | tr ' ' '\n' | head -n1)
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CR_PAT }}

      - name: Build & Push
        uses: docker/build-push-action@v6
        with:
          context: artifacts
          file: Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  release:
    needs: [build_wheel, build_code]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v4
        with:
          lfs: true
          submodules: recursive

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/
          pattern: artifacts-*
          merge-multiple: true

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/*
          draft: false
          prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
          name: Release ${{ github.ref_name }}
          generate_release_notes: true
          tag_name: ${{ github.ref }}
          token: ${{ secrets.GITHUB_TOKEN }}